Picttures of containers - off grid
Gmail access (for verification)
SLL certificate
Hosting ireland log in details
check enlarging of logo and how menu toggle shows under
check permissions on php_errors.log as currently set to be accessible for everyone
Change apache serverName Directive at the end of the file to be SP Energy and not local host(apache config files)

When deploying a website online, permissions and security considerations are important to ensure both proper functionality and protection of your server. Here are key aspects to consider for file permissions and security:

1. File and Directory Permissions
Directories: Generally, directories should have 755 permissions (rwxr-xr-x). This means the owner can read, write, and execute, while others can read and execute.
Files: Files should typically have 644 permissions (rw-r--r--). This means the owner can read and write, while others can only read.
Example commands to set permissions:

bash
Copy code
find /var/www/html -type d -exec chmod 755 {} \;
find /var/www/html -type f -exec chmod 644 {} \;
2. Ownership
Ensure that the files and directories are owned by the user under which the web server runs, usually www-data on Ubuntu. Use the following command to change ownership:
bash
Copy code
sudo chown -R www-data:www-data /var/www/html
3. Disable Directory Listing
Disable directory listing to prevent users from seeing a list of files in a directory. This can be done by ensuring Options -Indexes is set in your Apache configuration for the relevant directories.
4. Configure .htaccess
Use .htaccess files to control access and security settings for specific directories. For example, you might restrict access to sensitive areas of your site or enable rewrite rules.
5. Set Up a Firewall
Use a firewall to restrict access to your server. Allow only the necessary ports (e.g., 80 for HTTP, 443 for HTTPS) and block all other ports.
6. Keep Software Updated
Regularly update Apache, PHP, and other software to ensure you have the latest security patches.
7. SSL/TLS
Use SSL/TLS certificates to encrypt data between your server and users. This is important for protecting sensitive information and improving security.
8. Security Modules
Consider using additional Apache security modules such as mod_security to protect against various types of attacks.
Example of Basic .htaccess Configuration
apache
Copy code
# Disable directory browsing
Options -Indexes

# Restrict access to certain files
<FilesMatch "^(config\.php|\.env)$">
    Order allow,deny
    Deny from all
</FilesMatch>
Example of Basic Firewall Setup (Using ufw)
bash
Copy code
sudo ufw allow 'Apache Full'
sudo ufw enable
By taking these steps, you can ensure that your website is not only functional but also secure when it's live on the internet.